// <auto-generated />
using System;
using System.Collections.Generic;
using Hanekawa.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Hanekawa.Infrastructure.Migrations
{
    [DbContext(typeof(DbService))]
    [Migration("20211012080638_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.Account", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ChannelVoiceTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Class")
                        .HasColumnType("integer");

                    b.Property<int>("Credit")
                        .HasColumnType("integer");

                    b.Property<int>("CreditSpecial")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DailyCredit")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Decay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<long>("DropClaims")
                        .HasColumnType("bigint");

                    b.Property<int>("Exp")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FirstMessage")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GameKillAmount")
                        .HasColumnType("integer");

                    b.Property<int>("GamePvPAmount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastMessage")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MvpCount")
                        .HasColumnType("integer");

                    b.Property<bool>("MvpOptOut")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("text");

                    b.Property<int>("Rep")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RepCooldown")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Sessions")
                        .HasColumnType("integer");

                    b.Property<int>("StarGiven")
                        .HasColumnType("integer");

                    b.Property<int>("StarReceived")
                        .HasColumnType("integer");

                    b.Property<long>("StatMessages")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("StatVoiceTime")
                        .HasColumnType("interval");

                    b.Property<int>("TotalExp")
                        .HasColumnType("integer");

                    b.Property<DateTime>("VoiceExpTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("GuildId", "UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.AccountGlobal", b =>
                {
                    b.Property<ulong>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Credit")
                        .HasColumnType("integer");

                    b.Property<int>("Exp")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Rep")
                        .HasColumnType("integer");

                    b.Property<int>("StarGive")
                        .HasColumnType("integer");

                    b.Property<int>("StarReceive")
                        .HasColumnType("integer");

                    b.Property<int>("TotalExp")
                        .HasColumnType("integer");

                    b.Property<int>("UserColor")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("AccountGlobals");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.Achievement.Achievement", b =>
                {
                    b.Property<Guid>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("Requirement")
                        .HasColumnType("integer");

                    b.Property<int?>("Reward")
                        .HasColumnType("integer");

                    b.HasKey("AchievementId");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            AchievementId = new Guid("624da012-2194-428a-b693-b9b08ad0a9af"),
                            Category = 0,
                            Description = "Reach Server Level 5",
                            Difficulty = 0,
                            Hidden = false,
                            ImageUrl = "",
                            Name = "Level 5",
                            Points = 10,
                            Requirement = 5
                        },
                        new
                        {
                            AchievementId = new Guid("aea7144b-e287-40ff-9a00-3a5a6b815170"),
                            Category = 0,
                            Description = "Reach Server Level 10",
                            Difficulty = 0,
                            Hidden = false,
                            ImageUrl = "",
                            Name = "Level 10",
                            Points = 10,
                            Requirement = 10
                        },
                        new
                        {
                            AchievementId = new Guid("7c315a8d-35cc-48de-8dd4-f90d1d36132e"),
                            Category = 0,
                            Description = "Reach Server Level 20",
                            Difficulty = 0,
                            Hidden = false,
                            ImageUrl = "",
                            Name = "Level 20",
                            Points = 10,
                            Requirement = 20
                        },
                        new
                        {
                            AchievementId = new Guid("915e030a-c71e-42fa-930a-ea250afb30aa"),
                            Category = 0,
                            Description = "Reach Server Level 30",
                            Difficulty = 0,
                            Hidden = false,
                            ImageUrl = "",
                            Name = "Level 30",
                            Points = 10,
                            Requirement = 30
                        },
                        new
                        {
                            AchievementId = new Guid("2790c6d3-d8bf-47a8-a89e-bb018982deaf"),
                            Category = 0,
                            Description = "Reach Server Level 40",
                            Difficulty = 0,
                            Hidden = false,
                            ImageUrl = "",
                            Name = "Level 40",
                            Points = 10,
                            Requirement = 40
                        },
                        new
                        {
                            AchievementId = new Guid("02d386b7-3ce5-442c-bd58-77a20dd4c5d3"),
                            Category = 0,
                            Description = "Reach Server Level 50",
                            Difficulty = 1,
                            Hidden = false,
                            ImageUrl = "",
                            Name = "Level 50",
                            Points = 10,
                            Requirement = 50
                        },
                        new
                        {
                            AchievementId = new Guid("c9a5ef51-2bd8-430f-bd82-c725d6220ae7"),
                            Category = 0,
                            Description = "Reach Server Level 60",
                            Difficulty = 1,
                            Hidden = false,
                            ImageUrl = "",
                            Name = "Level 60",
                            Points = 10,
                            Requirement = 60
                        },
                        new
                        {
                            AchievementId = new Guid("96785bc2-4de5-4d8d-9924-6c902729caf3"),
                            Category = 0,
                            Description = "Reach Server Level 70",
                            Difficulty = 2,
                            Hidden = false,
                            ImageUrl = "",
                            Name = "Reach Server Level 70",
                            Points = 10,
                            Requirement = 70
                        },
                        new
                        {
                            AchievementId = new Guid("110319eb-d9d9-4fe0-a695-d8a1f839f5b0"),
                            Category = 0,
                            Description = "Reach Server Level 80",
                            Difficulty = 2,
                            Hidden = false,
                            ImageUrl = "",
                            Name = "Level 80",
                            Points = 10,
                            Requirement = 80
                        },
                        new
                        {
                            AchievementId = new Guid("d33c6057-4128-4014-be25-ff9c08c0d9cc"),
                            Category = 0,
                            Description = "Reach Server Level 90",
                            Difficulty = 3,
                            Hidden = false,
                            ImageUrl = "",
                            Name = "Level 90",
                            Points = 10,
                            Requirement = 90
                        },
                        new
                        {
                            AchievementId = new Guid("fe43f8c8-77eb-40ea-9b67-7ca8117160ba"),
                            Category = 0,
                            Description = "Reach Server Level 100",
                            Difficulty = 3,
                            Hidden = false,
                            ImageUrl = "",
                            Name = "Level 100",
                            Points = 10,
                            Requirement = 100
                        });
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.Achievement.AchievementUnlocked", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AccountGlobalUserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid>("AchieveId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AchievementId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<ulong>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccountGlobalUserId");

                    b.HasIndex("AchievementId");

                    b.ToTable("AchievementUnlocks");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.HungerGame.HungerGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Alive")
                        .HasColumnType("integer");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Participants")
                        .HasColumnType("integer");

                    b.Property<int>("Round")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("HungerGames");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.HungerGame.HungerGameCustomChar", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id", "GuildId");

                    b.ToTable("HungerGameCustomChars");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.HungerGame.HungerGameDefault", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HungerGameDefaults");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            Avatar = "https://i.imgur.com/XMjW8Qn.png",
                            Name = "Dia"
                        },
                        new
                        {
                            Id = 2m,
                            Avatar = "https://i.imgur.com/7URjbvT.png",
                            Name = "Kanan"
                        },
                        new
                        {
                            Id = 3m,
                            Avatar = "https://i.imgur.com/tPDON9P.png",
                            Name = "Yoshiko"
                        },
                        new
                        {
                            Id = 4m,
                            Avatar = "https://i.imgur.com/dcB1loo.png",
                            Name = "Kongou"
                        },
                        new
                        {
                            Id = 5m,
                            Avatar = "https://i.imgur.com/7GC7FvJ.png",
                            Name = "Haruna"
                        },
                        new
                        {
                            Id = 6m,
                            Avatar = "https://i.imgur.com/8748bUL.png",
                            Name = "Yamato"
                        },
                        new
                        {
                            Id = 7m,
                            Avatar = "https://i.imgur.com/VLsezdF.png",
                            Name = "Akagi"
                        },
                        new
                        {
                            Id = 8m,
                            Avatar = "https://i.imgur.com/eyt9k8E.png",
                            Name = "Kaga"
                        },
                        new
                        {
                            Id = 9m,
                            Avatar = "https://i.imgur.com/4XYg6ch.png",
                            Name = "Zero Two"
                        },
                        new
                        {
                            Id = 10m,
                            Avatar = "https://i.imgur.com/Nl6WsbP.png",
                            Name = "Echidna"
                        },
                        new
                        {
                            Id = 11m,
                            Avatar = "https://i.imgur.com/kF9b4SJ.png",
                            Name = "Emilia"
                        },
                        new
                        {
                            Id = 12m,
                            Avatar = "https://i.imgur.com/y3bb8Sk.png",
                            Name = "Rem"
                        },
                        new
                        {
                            Id = 13m,
                            Avatar = "https://i.imgur.com/5CcdVBE.png",
                            Name = "Ram"
                        },
                        new
                        {
                            Id = 14m,
                            Avatar = "https://i.imgur.com/0VYBYEg.png",
                            Name = "Gura"
                        },
                        new
                        {
                            Id = 15m,
                            Avatar = "https://i.imgur.com/rYa5iYc.png",
                            Name = "Shiki"
                        },
                        new
                        {
                            Id = 16m,
                            Avatar = "https://i.imgur.com/PT8SsVB.png",
                            Name = "Chika"
                        },
                        new
                        {
                            Id = 17m,
                            Avatar = "https://i.imgur.com/5xR0ImK.png",
                            Name = "Sora"
                        },
                        new
                        {
                            Id = 18m,
                            Avatar = "https://i.imgur.com/U0NlfJd.png",
                            Name = "Nobuna"
                        },
                        new
                        {
                            Id = 19m,
                            Avatar = "https://i.imgur.com/CI9Osi5.png",
                            Name = "Akame"
                        },
                        new
                        {
                            Id = 20m,
                            Avatar = "https://i.imgur.com/GhSG97V.png",
                            Name = "Shiina"
                        },
                        new
                        {
                            Id = 21m,
                            Avatar = "https://i.imgur.com/VyJf95i.png",
                            Name = "Bocchi"
                        },
                        new
                        {
                            Id = 22m,
                            Avatar = "https://i.imgur.com/bv5ao8Z.png",
                            Name = "Enterprise"
                        },
                        new
                        {
                            Id = 23m,
                            Avatar = "https://i.imgur.com/HoNwKi9.png",
                            Name = "Chocola"
                        },
                        new
                        {
                            Id = 24m,
                            Avatar = "https://i.imgur.com/aijxHla.png",
                            Name = "Vanilla"
                        },
                        new
                        {
                            Id = 25m,
                            Avatar = "https://i.imgur.com/Wxhd5WY.png",
                            Name = "Shiro"
                        });
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.HungerGame.HungerGameHistory", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CreditReward")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExpReward")
                        .HasColumnType("integer");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("SpecialCreditReward")
                        .HasColumnType("integer");

                    b.Property<ulong>("Winner")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GameId");

                    b.ToTable("HungerGameHistories");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.HungerGame.HungerGameProfile", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Alive")
                        .HasColumnType("boolean");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<bool>("Bleeding")
                        .HasColumnType("boolean");

                    b.Property<bool>("Bot")
                        .HasColumnType("boolean");

                    b.Property<int>("Bullets")
                        .HasColumnType("integer");

                    b.Property<int>("FirstAid")
                        .HasColumnType("integer");

                    b.Property<int>("Food")
                        .HasColumnType("integer");

                    b.Property<double>("Health")
                        .HasColumnType("double precision");

                    b.Property<double>("Hunger")
                        .HasColumnType("double precision");

                    b.Property<int>("MeleeWeapon")
                        .HasColumnType("integer");

                    b.Property<int>("Move")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RangeWeapon")
                        .HasColumnType("integer");

                    b.Property<double>("Stamina")
                        .HasColumnType("double precision");

                    b.Property<double>("Thirst")
                        .HasColumnType("double precision");

                    b.Property<double>("Tiredness")
                        .HasColumnType("double precision");

                    b.Property<int>("Water")
                        .HasColumnType("integer");

                    b.Property<int>("Weapons")
                        .HasColumnType("integer");

                    b.HasKey("GuildId", "UserId");

                    b.ToTable("HungerGameProfiles");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.HungerGame.HungerGameStatus", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("CreditReward")
                        .HasColumnType("integer");

                    b.Property<string>("EmoteMessageFormat")
                        .HasColumnType("text");

                    b.Property<ulong?>("EventChannel")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("ExpReward")
                        .HasColumnType("integer");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<ulong?>("RoleReward")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("SignUpChannel")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("SignUpMessage")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("SignUpStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SpecialCreditReward")
                        .HasColumnType("integer");

                    b.Property<int>("Stage")
                        .HasColumnType("integer");

                    b.HasKey("GuildId");

                    b.ToTable("HungerGameStatus");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.Profile.Background", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackgroundUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Backgrounds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27b87558-d918-42b3-80a2-e0e9a8798f4a"),
                            BackgroundUrl = "https://i.imgur.com/epIb29P.png"
                        },
                        new
                        {
                            Id = new Guid("2ae7e0a7-d01c-4b8a-8382-6c55fd867d77"),
                            BackgroundUrl = "https://i.imgur.com/04PbzvT.png"
                        },
                        new
                        {
                            Id = new Guid("fc53eac7-1af1-48b0-ba40-b16f5339ebe3"),
                            BackgroundUrl = "https://i.imgur.com/5ojmh76.png"
                        },
                        new
                        {
                            Id = new Guid("fa056244-ae59-4c3a-8cb3-ed79a7d782a4"),
                            BackgroundUrl = "https://i.imgur.com/OAMpNDh.png"
                        },
                        new
                        {
                            Id = new Guid("6d1b1dad-6f2c-44b2-9d76-9eeebd1893d1"),
                            BackgroundUrl = "https://i.imgur.com/KXO5bx5.png"
                        },
                        new
                        {
                            Id = new Guid("9a34da71-2f36-4570-9f3e-4bc6306c28ec"),
                            BackgroundUrl = "https://i.imgur.com/5h5zZ7C.png"
                        });
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.ShipGame.GameClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ChanceAvoid")
                        .HasColumnType("integer");

                    b.Property<int>("ChanceCrit")
                        .HasColumnType("integer");

                    b.Property<int>("LevelRequirement")
                        .HasColumnType("integer");

                    b.Property<double>("ModifierAvoidance")
                        .HasColumnType("double precision");

                    b.Property<double>("ModifierCriticalChance")
                        .HasColumnType("double precision");

                    b.Property<double>("ModifierDamage")
                        .HasColumnType("double precision");

                    b.Property<double>("ModifierHealth")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GameClasses");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.ShipGame.GameConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DefaultDamage")
                        .HasColumnType("integer");

                    b.Property<int>("DefaultHealth")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GameConfigs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.ShipGame.GameEnemy", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("CreditGain")
                        .HasColumnType("integer");

                    b.Property<int>("Damage")
                        .HasColumnType("integer");

                    b.Property<bool>("Elite")
                        .HasColumnType("boolean");

                    b.Property<int>("ExpGain")
                        .HasColumnType("integer");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Rare")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("GameEnemies");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.Stores.ServerStore", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<bool>("SpecialCredit")
                        .HasColumnType("boolean");

                    b.HasKey("GuildId", "RoleId");

                    b.ToTable("ServerStores");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Administration.ApprovalQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UploadTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<ulong>("Uploader")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id", "GuildId");

                    b.ToTable("ApprovalQueues");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Administration.Blacklist", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<ulong>("ResponsibleUser")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset?>("Unban")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GuildId");

                    b.ToTable("Blacklists");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Advertise.DblAuth", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid>("AuthKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CreditGain")
                        .HasColumnType("integer");

                    b.Property<int>("ExpGain")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<ulong?>("RoleIdReward")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("SpecialCredit")
                        .HasColumnType("integer");

                    b.HasKey("GuildId");

                    b.ToTable("DblAuths");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Advertise.VoteLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<ulong>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("VoteLogs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.AutoMessage.AutoMessage", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("Creator")
                        .HasColumnType("numeric(20,0)");

                    b.Property<TimeSpan>("Interval")
                        .HasColumnType("interval");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Webhook")
                        .HasColumnType("text");

                    b.Property<ulong?>("WebhookId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId", "Name");

                    b.ToTable("AutoMessages");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.BoardConfig.Board", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset?>("Boarded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StarAmount")
                        .HasColumnType("integer");

                    b.Property<ulong>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId", "MessageId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Club.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<ulong?>("AdMessage")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("AutoAdd")
                        .HasColumnType("boolean");

                    b.Property<ulong?>("Channel")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<ulong>("Leader")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean");

                    b.Property<ulong?>("Role")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("ClubInfos");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Club.ClubBlacklist", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("User")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<ulong>("Issuer")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GuildId", "User");

                    b.HasIndex("ClubId");

                    b.ToTable("ClubBlacklists");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Club.ClubUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<ulong>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("ClubPlayers");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.DropChannel", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId", "ChannelId");

                    b.ToTable("DropChannels");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.Guild.AdminConfig", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("EmoteCountFilter")
                        .HasColumnType("integer");

                    b.Property<bool>("FilterAllInv")
                        .HasColumnType("boolean");

                    b.Property<bool>("FilterInvites")
                        .HasColumnType("boolean");

                    b.Property<int?>("FilterMsgLength")
                        .HasColumnType("integer");

                    b.Property<bool>("FilterUrls")
                        .HasColumnType("boolean");

                    b.Property<bool>("IgnoreAllChannels")
                        .HasColumnType("boolean");

                    b.Property<int?>("MentionCountFilter")
                        .HasColumnType("integer");

                    b.Property<ulong?>("MuteRole")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId");

                    b.ToTable("AdminConfigs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.Guild.BoardConfig", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("Channel")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Emote")
                        .HasColumnType("text");

                    b.Property<string>("Webhook")
                        .HasColumnType("text");

                    b.Property<ulong?>("WebhookId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId");

                    b.ToTable("BoardConfigs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.Guild.BoostConfig", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("CreditGain")
                        .HasColumnType("integer");

                    b.Property<int>("ExpGain")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("SpecialCreditGain")
                        .HasColumnType("integer");

                    b.Property<string>("Webhook")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("BoostConfigs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.Guild.ChannelConfig", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("ReportChannel")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("SelfAssignableChannel")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("WebhookReport")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("ChannelConfigs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.Guild.ClubConfig", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("AdvertisementChannel")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("AutoPrune")
                        .HasColumnType("boolean");

                    b.Property<ulong?>("ChannelCategory")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("ChannelRequiredAmount")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelRequiredLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableTextChannel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableVoiceChannel")
                        .HasColumnType("boolean");

                    b.Property<bool>("RoleEnabled")
                        .HasColumnType("boolean");

                    b.HasKey("GuildId");

                    b.ToTable("ClubConfigs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.Guild.CurrencyConfig", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("text");

                    b.Property<string>("CurrencySign")
                        .HasColumnType("text");

                    b.Property<ulong?>("CurrencySignId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("EmoteCurrency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("SpecialCurrencyName")
                        .HasColumnType("text");

                    b.Property<string>("SpecialCurrencySign")
                        .HasColumnType("text");

                    b.Property<ulong?>("SpecialCurrencySignId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("SpecialEmoteCurrency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("GuildId");

                    b.ToTable("CurrencyConfigs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.Guild.DropConfig", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Emote")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("DropConfigs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.Guild.LevelConfig", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<double>("BoostExpMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(1.0);

                    b.Property<bool>("Decay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("ExpDisabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("StackLvlRoles")
                        .HasColumnType("boolean");

                    b.Property<bool>("TextExpEnabled")
                        .HasColumnType("boolean");

                    b.Property<double>("TextExpMultiplier")
                        .HasColumnType("double precision");

                    b.Property<bool>("VoiceExpEnabled")
                        .HasColumnType("boolean");

                    b.Property<double>("VoiceExpMultiplier")
                        .HasColumnType("double precision");

                    b.HasKey("GuildId");

                    b.ToTable("LevelConfigs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.Guild.LoggingConfig", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("LogAutoMod")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("LogAvi")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("LogBan")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("LogJoin")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("LogMsg")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("LogVoice")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("LogWarn")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("WebhookAutoMod")
                        .HasColumnType("text");

                    b.Property<ulong?>("WebhookAutoModId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("WebhookAvi")
                        .HasColumnType("text");

                    b.Property<ulong?>("WebhookAviId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("WebhookBan")
                        .HasColumnType("text");

                    b.Property<ulong?>("WebhookBanId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("WebhookJoin")
                        .HasColumnType("text");

                    b.Property<ulong?>("WebhookJoinId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("WebhookMessage")
                        .HasColumnType("text");

                    b.Property<ulong?>("WebhookMessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("WebhookVoice")
                        .HasColumnType("text");

                    b.Property<ulong?>("WebhookVoiceId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("WebhookWarn")
                        .HasColumnType("text");

                    b.Property<ulong?>("WebhookWarnId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId");

                    b.ToTable("LoggingConfigs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.Guild.SuggestionConfig", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("Channel")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("EmoteNo")
                        .HasColumnType("text");

                    b.Property<string>("EmoteYes")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("SuggestionConfigs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.Guild.WelcomeConfig", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("AutoDelOnLeave")
                        .HasColumnType("boolean");

                    b.Property<bool>("Banner")
                        .HasColumnType("boolean");

                    b.Property<ulong?>("Channel")
                        .HasColumnType("numeric(20,0)");

                    b.Property<TimeSpan?>("IgnoreNew")
                        .HasColumnType("interval");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int?>("Reward")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("TimeToDelete")
                        .HasColumnType("interval");

                    b.Property<string>("Webhook")
                        .HasColumnType("text");

                    b.Property<ulong?>("WebhookId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId");

                    b.ToTable("WelcomeConfigs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.GuildConfig", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("EmbedColor")
                        .HasColumnType("integer");

                    b.Property<ulong?>("MvpChannel")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("Premium")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GuildId");

                    b.ToTable("GuildConfigs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.IgnoreChannel", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId", "ChannelId");

                    b.ToTable("IgnoreChannels");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.LevelExpEvent", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<double>("Multiplier")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GuildId");

                    b.ToTable("LevelExpEvents");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.LevelExpReduction", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId", "ChannelId");

                    b.ToTable("LevelExpReductions");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.LevelReward", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<bool>("NoDecay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<ulong>("Role")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Stackable")
                        .HasColumnType("boolean");

                    b.HasKey("GuildId", "Level");

                    b.ToTable("LevelRewards");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.SelfAssignAbleRole", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("EmoteId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("EmoteMessageFormat")
                        .HasColumnType("text");

                    b.Property<string>("EmoteReactFormat")
                        .HasColumnType("text");

                    b.Property<bool>("Exclusive")
                        .HasColumnType("boolean");

                    b.HasKey("GuildId", "RoleId");

                    b.ToTable("SelfAssignAbleRoles");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.SelfAssignReactionRole", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("ConfigId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Exclusive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<List<string>>("Reactions")
                        .HasColumnType("text[]");

                    b.HasKey("GuildId", "ChannelId", "MessageId");

                    b.HasIndex("ConfigId");

                    b.ToTable("SelfAssignReactionRoles");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.WelcomeBanner", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AvatarSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<int>("AviPlaceX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<int>("AviPlaceY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<bool>("IsNsfw")
                        .HasColumnType("boolean");

                    b.Property<int>("TextPlaceX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(245);

                    b.Property<int>("TextPlaceY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(40);

                    b.Property<int>("TextSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(33);

                    b.Property<DateTimeOffset>("UploadTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<ulong>("Uploader")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("GuildId", "Id");

                    b.ToTable("WelcomeBanners");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Giveaway.Giveaway", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("AccountAgeRequirement")
                        .HasColumnType("interval");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CloseAtOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAtOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<ulong>("Creator")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("IdNum")
                        .HasColumnType("integer");

                    b.Property<int?>("LevelRequirement")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<ulong?>("ReactionMessage")
                        .HasColumnType("numeric(20,0)");

                    b.Property<TimeSpan?>("ServerAgeRequirement")
                        .HasColumnType("interval");

                    b.Property<bool>("Stack")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("WinnerAmount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Giveaways");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Giveaway.GiveawayHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("ClosedAtOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAtOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<ulong>("Creator")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IdNum")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<ulong[]>("Winner")
                        .HasColumnType("numeric[]");

                    b.HasKey("Id", "GuildId");

                    b.ToTable("GiveawayHistories");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Giveaway.GiveawayParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Entry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GiveawayId")
                        .HasColumnType("uuid");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("GiveawayId");

                    b.ToTable("GiveawayParticipants");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Internal.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CallSite")
                        .HasColumnType("text");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<string>("Logger")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("TimeStamp")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Moderation.ModLog", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<ulong>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("ModId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.Property<ulong>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id", "GuildId");

                    b.ToTable("ModLogs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Moderation.MuteTimer", b =>
                {
                    b.Property<ulong>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId", "GuildId");

                    b.ToTable("MuteTimers");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Moderation.Report", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Attachment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<ulong?>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<ulong>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id", "GuildId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Moderation.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<ulong?>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.Property<ulong?>("ResponseUser")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<ulong>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id", "GuildId");

                    b.ToTable("Suggestions");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Moderation.Warn", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("Moderator")
                        .HasColumnType("numeric(20,0)");

                    b.Property<TimeSpan?>("MuteTimer")
                        .HasColumnType("interval");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<ulong>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Valid")
                        .HasColumnType("boolean");

                    b.HasKey("Id", "GuildId");

                    b.ToTable("Warns");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Premium.MvpConfig", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("CreditReward")
                        .HasColumnType("integer");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ExpReward")
                        .HasColumnType("integer");

                    b.Property<ulong?>("RoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("SpecialCreditReward")
                        .HasColumnType("integer");

                    b.HasKey("GuildId");

                    b.ToTable("MvpConfigs");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Quote.Quote", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Added")
                        .HasColumnType("timestamp with time zone");

                    b.Property<ulong>("Creator")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("LevelCap")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<List<string>>("Triggers")
                        .HasColumnType("text[]");

                    b.HasKey("GuildId", "Key");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.SelfAssign.SelfAssignGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<ulong?>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong?>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SelfAssignGroups");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.SelfAssign.SelfAssignItem", b =>
                {
                    b.Property<ulong>("RoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Emote")
                        .HasColumnType("text");

                    b.Property<ulong?>("EmoteId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Exclusive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId");

                    b.HasIndex("GroupId");

                    b.ToTable("SelfAssignItems");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.VoiceRoles", b =>
                {
                    b.Property<ulong>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("VoiceId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId", "VoiceId");

                    b.ToTable("VoiceRoles");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.Achievement.AchievementUnlocked", b =>
                {
                    b.HasOne("Hanekawa.Infrastructure.Tables.Account.AccountGlobal", null)
                        .WithMany("AchievementUnlocks")
                        .HasForeignKey("AccountGlobalUserId");

                    b.HasOne("Hanekawa.Infrastructure.Tables.Account.Achievement.Achievement", "Achievement")
                        .WithMany("Unlocked")
                        .HasForeignKey("AchievementId");

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Club.ClubBlacklist", b =>
                {
                    b.HasOne("Hanekawa.Infrastructure.Tables.Club.Club", "Club")
                        .WithMany("Blacklist")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Club.ClubUser", b =>
                {
                    b.HasOne("Hanekawa.Infrastructure.Tables.Club.Club", "Club")
                        .WithMany("Users")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.SelfAssignReactionRole", b =>
                {
                    b.HasOne("Hanekawa.Infrastructure.Tables.Config.Guild.ChannelConfig", "Config")
                        .WithMany("AssignReactionRoles")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Giveaway.GiveawayParticipant", b =>
                {
                    b.HasOne("Hanekawa.Infrastructure.Tables.Giveaway.Giveaway", "Giveaway")
                        .WithMany("Participants")
                        .HasForeignKey("GiveawayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Giveaway");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.SelfAssign.SelfAssignItem", b =>
                {
                    b.HasOne("Hanekawa.Infrastructure.Tables.SelfAssign.SelfAssignGroup", "Group")
                        .WithMany("Roles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.AccountGlobal", b =>
                {
                    b.Navigation("AchievementUnlocks");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Account.Achievement.Achievement", b =>
                {
                    b.Navigation("Unlocked");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Club.Club", b =>
                {
                    b.Navigation("Blacklist");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Config.Guild.ChannelConfig", b =>
                {
                    b.Navigation("AssignReactionRoles");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.Giveaway.Giveaway", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Hanekawa.Infrastructure.Tables.SelfAssign.SelfAssignGroup", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
