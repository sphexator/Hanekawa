// <auto-generated />
using System;
using System.Collections.Generic;
using Hanekawa.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Hanekawa.Database.Migrations
{
    [DbContext(typeof(DbService))]
    [Migration("20210430183322_InitialRemovalThree")]
    partial class InitialRemovalThree
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Hanekawa.Database.Tables.Account.Account", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ChannelVoiceTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Class")
                        .HasColumnType("integer");

                    b.Property<int>("Credit")
                        .HasColumnType("integer");

                    b.Property<int>("CreditSpecial")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DailyCredit")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Decay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<long>("DropClaims")
                        .HasColumnType("bigint");

                    b.Property<int>("Exp")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FirstMessage")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GameKillAmount")
                        .HasColumnType("integer");

                    b.Property<int>("GamePvPAmount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastMessage")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MvpCount")
                        .HasColumnType("integer");

                    b.Property<bool>("MvpOptOut")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("text");

                    b.Property<int>("Rep")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RepCooldown")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Sessions")
                        .HasColumnType("integer");

                    b.Property<int>("StarGiven")
                        .HasColumnType("integer");

                    b.Property<int>("StarReceived")
                        .HasColumnType("integer");

                    b.Property<long>("StatMessages")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("StatVoiceTime")
                        .HasColumnType("interval");

                    b.Property<int>("TotalExp")
                        .HasColumnType("integer");

                    b.Property<DateTime>("VoiceExpTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("GuildId", "UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Account.AccountGlobal", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Credit")
                        .HasColumnType("integer");

                    b.Property<int>("Exp")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Rep")
                        .HasColumnType("integer");

                    b.Property<int>("StarGive")
                        .HasColumnType("integer");

                    b.Property<int>("StarReceive")
                        .HasColumnType("integer");

                    b.Property<int>("TotalExp")
                        .HasColumnType("integer");

                    b.Property<int>("UserColor")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("AccountGlobals");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Administration.Blacklist", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<long>("ResponsibleUser")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("Unban")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GuildId");

                    b.ToTable("Blacklists");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Advertise.DblAuth", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("AuthKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CreditGain")
                        .HasColumnType("integer");

                    b.Property<int>("ExpGain")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<long?>("RoleIdReward")
                        .HasColumnType("bigint");

                    b.Property<int>("SpecialCredit")
                        .HasColumnType("integer");

                    b.HasKey("GuildId");

                    b.ToTable("DblAuths");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Advertise.VoteLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("VoteLogs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.AutoMessage.AutoMessage", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<long>("Creator")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("Interval")
                        .HasColumnType("interval");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.HasKey("GuildId", "Name");

                    b.ToTable("AutoMessages");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.BoardConfig.Board", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("Boarded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StarAmount")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("GuildId", "MessageId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.Guild.AdminConfig", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int?>("EmoteCountFilter")
                        .HasColumnType("integer");

                    b.Property<bool>("FilterAllInv")
                        .HasColumnType("boolean");

                    b.Property<bool>("FilterInvites")
                        .HasColumnType("boolean");

                    b.Property<int?>("FilterMsgLength")
                        .HasColumnType("integer");

                    b.Property<bool>("FilterUrls")
                        .HasColumnType("boolean");

                    b.Property<bool>("IgnoreAllChannels")
                        .HasColumnType("boolean");

                    b.Property<int?>("MentionCountFilter")
                        .HasColumnType("integer");

                    b.Property<long?>("MuteRole")
                        .HasColumnType("bigint");

                    b.HasKey("GuildId");

                    b.ToTable("AdminConfigs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.Guild.BoardConfig", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Channel")
                        .HasColumnType("bigint");

                    b.Property<string>("Emote")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("BoardConfigs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.Guild.BoostConfig", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<int>("CreditGain")
                        .HasColumnType("integer");

                    b.Property<int>("ExpGain")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("SpecialCreditGain")
                        .HasColumnType("integer");

                    b.HasKey("GuildId");

                    b.ToTable("BoostConfigs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.Guild.ChannelConfig", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DesignChannel")
                        .HasColumnType("bigint");

                    b.Property<long?>("EventChannel")
                        .HasColumnType("bigint");

                    b.Property<long?>("EventSchedulerChannel")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModChannel")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuestionAndAnswerChannel")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReportChannel")
                        .HasColumnType("bigint");

                    b.Property<long?>("SelfAssignableChannel")
                        .HasColumnType("bigint");

                    b.HasKey("GuildId");

                    b.ToTable("ChannelConfigs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.Guild.ClubConfig", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AdvertisementChannel")
                        .HasColumnType("bigint");

                    b.Property<bool>("AutoPrune")
                        .HasColumnType("boolean");

                    b.Property<long?>("ChannelCategory")
                        .HasColumnType("bigint");

                    b.Property<int>("ChannelRequiredAmount")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelRequiredLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableTextChannel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableVoiceChannel")
                        .HasColumnType("boolean");

                    b.Property<bool>("RoleEnabled")
                        .HasColumnType("boolean");

                    b.HasKey("GuildId");

                    b.ToTable("ClubConfigs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.Guild.CurrencyConfig", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("text");

                    b.Property<string>("CurrencySign")
                        .HasColumnType("text");

                    b.Property<long?>("CurrencySignId")
                        .HasColumnType("bigint");

                    b.Property<bool>("EmoteCurrency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("SpecialCurrencyName")
                        .HasColumnType("text");

                    b.Property<string>("SpecialCurrencySign")
                        .HasColumnType("text");

                    b.Property<long?>("SpecialCurrencySignId")
                        .HasColumnType("bigint");

                    b.Property<bool>("SpecialEmoteCurrency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("GuildId");

                    b.ToTable("CurrencyConfigs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.Guild.DropConfig", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Emote")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("DropConfigs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.Guild.LevelConfig", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<double>("BoostExpMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(1.0);

                    b.Property<bool>("Decay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("ExpDisabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("StackLvlRoles")
                        .HasColumnType("boolean");

                    b.Property<bool>("TextExpEnabled")
                        .HasColumnType("boolean");

                    b.Property<double>("TextExpMultiplier")
                        .HasColumnType("double precision");

                    b.Property<bool>("VoiceExpEnabled")
                        .HasColumnType("boolean");

                    b.Property<double>("VoiceExpMultiplier")
                        .HasColumnType("double precision");

                    b.HasKey("GuildId");

                    b.ToTable("LevelConfigs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.Guild.LoggingConfig", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LogAutoMod")
                        .HasColumnType("bigint");

                    b.Property<long?>("LogAvi")
                        .HasColumnType("bigint");

                    b.Property<long?>("LogBan")
                        .HasColumnType("bigint");

                    b.Property<long?>("LogJoin")
                        .HasColumnType("bigint");

                    b.Property<long?>("LogMsg")
                        .HasColumnType("bigint");

                    b.Property<long?>("LogReaction")
                        .HasColumnType("bigint");

                    b.Property<long?>("LogVoice")
                        .HasColumnType("bigint");

                    b.Property<long?>("LogWarn")
                        .HasColumnType("bigint");

                    b.Property<string>("ReactionWebhook")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("LoggingConfigs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.Guild.SuggestionConfig", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Channel")
                        .HasColumnType("bigint");

                    b.Property<string>("EmoteNo")
                        .HasColumnType("text");

                    b.Property<string>("EmoteYes")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("SuggestionConfigs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.Guild.WelcomeConfig", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AutoDelOnLeave")
                        .HasColumnType("boolean");

                    b.Property<bool>("Banner")
                        .HasColumnType("boolean");

                    b.Property<long?>("Channel")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("IgnoreNew")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int?>("Reward")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("TimeToDelete")
                        .HasColumnType("interval");

                    b.HasKey("GuildId");

                    b.ToTable("WelcomeConfigs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.GuildConfig", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("EmbedColor")
                        .HasColumnType("integer");

                    b.Property<long?>("MvpChannel")
                        .HasColumnType("bigint");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("GuildConfigs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.IgnoreChannel", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.HasKey("GuildId", "ChannelId");

                    b.ToTable("IgnoreChannels");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.LevelExpReduction", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.HasKey("GuildId", "ChannelId");

                    b.ToTable("LevelExpReductions");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.LevelReward", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<bool>("NoDecay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("Role")
                        .HasColumnType("bigint");

                    b.Property<bool>("Stackable")
                        .HasColumnType("boolean");

                    b.HasKey("GuildId", "Level");

                    b.ToTable("LevelRewards");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.LootChannel", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.HasKey("GuildId", "ChannelId");

                    b.ToTable("LootChannels");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.SelfAssignAbleRole", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmoteId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmoteMessageFormat")
                        .HasColumnType("text");

                    b.Property<string>("EmoteReactFormat")
                        .HasColumnType("text");

                    b.Property<bool>("Exclusive")
                        .HasColumnType("boolean");

                    b.HasKey("GuildId", "RoleId");

                    b.ToTable("SelfAssignAbleRoles");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.SelfAssignReactionRole", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("ConfigId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Exclusive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<List<string>>("Reactions")
                        .HasColumnType("text[]");

                    b.HasKey("GuildId", "ChannelId", "MessageId");

                    b.HasIndex("ConfigId");

                    b.ToTable("SelfAssignReactionRoles");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.WelcomeBanner", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AvatarSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<int>("AviPlaceX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<int>("AviPlaceY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<bool>("IsNsfw")
                        .HasColumnType("boolean");

                    b.Property<int>("TextPlaceX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(245);

                    b.Property<int>("TextPlaceY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(40);

                    b.Property<int>("TextSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(33);

                    b.Property<DateTimeOffset>("UploadTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Uploader")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("GuildId", "Id");

                    b.ToTable("WelcomeBanners");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Giveaway.Giveaway", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("AccountAgeRequirement")
                        .HasColumnType("interval");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CloseAtOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAtOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Creator")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("IdNum")
                        .HasColumnType("integer");

                    b.Property<int?>("LevelRequirement")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("ServerAgeRequirement")
                        .HasColumnType("interval");

                    b.Property<bool>("Stack")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("WinnerAmount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Giveaways");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Giveaway.GiveawayHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ClosedAtOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAtOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Creator")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IdNum")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<ulong[]>("Winner")
                        .HasColumnType("numeric[]");

                    b.HasKey("Id", "GuildId");

                    b.ToTable("GiveawayHistories");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Giveaway.GiveawayParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Entry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GiveawayId")
                        .HasColumnType("uuid");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GiveawayId");

                    b.ToTable("GiveawayParticipants");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Internal.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CallSite")
                        .HasColumnType("text");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<string>("Logger")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("TimeStamp")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Moderation.ModLog", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModId")
                        .HasColumnType("bigint");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id", "GuildId");

                    b.ToTable("ModLogs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Moderation.MuteTimer", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId", "GuildId");

                    b.ToTable("MuteTimers");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Moderation.Report", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Attachment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<long?>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id", "GuildId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Moderation.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.Property<long?>("ResponseUser")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id", "GuildId");

                    b.ToTable("Suggestions");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Moderation.Warn", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Moderator")
                        .HasColumnType("numeric(20,0)");

                    b.Property<TimeSpan?>("MuteTimer")
                        .HasColumnType("interval");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Valid")
                        .HasColumnType("boolean");

                    b.HasKey("Id", "GuildId");

                    b.ToTable("Warns");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Premium.MvpConfig", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("GuildId");

                    b.ToTable("MvpConfigs");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Quote.Quote", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Added")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Creator")
                        .HasColumnType("bigint");

                    b.Property<int>("LevelCap")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<List<string>>("Triggers")
                        .HasColumnType("text[]");

                    b.HasKey("GuildId", "Key");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.VoiceRoles", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("VoiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("GuildId", "VoiceId");

                    b.ToTable("VoiceRoles");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.SelfAssignReactionRole", b =>
                {
                    b.HasOne("Hanekawa.Database.Tables.Config.Guild.ChannelConfig", "Config")
                        .WithMany("AssignReactionRoles")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Giveaway.GiveawayParticipant", b =>
                {
                    b.HasOne("Hanekawa.Database.Tables.Giveaway.Giveaway", "Giveaway")
                        .WithMany("Participants")
                        .HasForeignKey("GiveawayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Giveaway");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Config.Guild.ChannelConfig", b =>
                {
                    b.Navigation("AssignReactionRoles");
                });

            modelBuilder.Entity("Hanekawa.Database.Tables.Giveaway.Giveaway", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
